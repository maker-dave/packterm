#!/usr/bin/env python3
# fake_direwolf.py - Mimics Direwolf's KISS interface over TCP with LAN discovery

import socket
import threading
import sys
import time
import os
import curses
import logging
import select
from collections import deque

KISS_PORT = 8051
PEER_PORT = 8052
BROADCAST_PORT = 5000
BROADCAST_INTERVAL = 60
BUFFER_SIZE = 1024
RETRY_INTERVAL = 10
MAX_LOG_LINES = 20
MAX_STATUS_LINES = 5
LOG_DIR = os.path.expanduser('~/terminal/server_data')
LOG_FILE = os.path.join(LOG_DIR, 'fake_direwolf.log')

peer_status = "Disconnected"
packet_log = deque(maxlen=MAX_LOG_LINES)
status_messages = deque(maxlen=MAX_STATUS_LINES)
screen_lock = threading.Lock()
peer_socket = None
stop_event = threading.Event()
discovered_peers = {}
screen_dirty = True
active_kiss_clients = []
connection_lock = threading.Lock()

os.makedirs(LOG_DIR, exist_ok=True)
if os.path.exists(LOG_FILE):
    os.remove(LOG_FILE)
    log = logging.getLogger()
    logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format='%(asctime)s - %(message)s')
else:
    logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format='%(asctime)s - %(message)s')
log = logging.info
log(f"Deleted old log file and started new session (PID: {os.getpid()})")

def add_status_message(message):
    with screen_lock:
        status_messages.append(f"{time.strftime('%H:%M:%S')}: {message}")
        global screen_dirty
        screen_dirty = True

def get_local_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(('10.255.255.255', 1))
        ip = s.getsockname()[0]
    except Exception:
        ip = '127.0.0.1'
    finally:
        s.close()
    return ip

def ping_peer(host):
    try:
        response = os.system(f"ping -c 1 -W 2 {host} > /dev/null 2>&1")
        return response == 0
    except Exception:
        return False

def parse_ax25_callsigns(frame):
    if len(frame) < 16:
        return "Unknown", "Unknown"
    ax25 = frame[2:-1]
    dest = ''.join(chr(b >> 1) for b in ax25[:6]).strip()
    src = ''.join(chr(b >> 1) for b in ax25[7:13]).strip()
    return src, dest

def decode_payload(frame):
    if len(frame) < 18:
        return "<short-frame>"
    ax25 = frame[2:-1]
    payload_start = 16  # After dest (7) + src (7) + control (1) + pid (1)
    payload_end = len(ax25) - 2  # Before CRC (2 bytes)
    payload = ax25[payload_start:payload_end]
    try:
        return payload.decode('ascii')
    except Exception as e:
        log(f"Decode failed: {e}, raw bytes: {payload.hex()}")
        return f"<decode-error: {e}>"

def handle_kiss_client(kiss_socket):
    addr = kiss_socket.getpeername()
    log(f"KISS client connected: {addr}")
    add_status_message(f"KISS client connected: {addr}")
    with screen_lock:
        active_kiss_clients.append(kiss_socket)
        screen_dirty = True
    buffer = b""
    while True:
        try:
            data = kiss_socket.recv(BUFFER_SIZE)
            if not data:
                log(f"KISS client {addr} disconnected")
                add_status_message(f"KISS client disconnected: {addr}")
                with screen_lock:
                    if kiss_socket in active_kiss_clients:
                        active_kiss_clients.remove(kiss_socket)
                        screen_dirty = True
                break
            buffer += data
            while b'\xC0' in buffer[1:]:
                end = buffer.find(b'\xC0', 1)
                if end == -1:
                    break
                frame = buffer[:end + 1]
                buffer = buffer[end + 1:]
                if len(frame) > 2 and frame[0] == 0xC0 and frame[-1] == 0xC0:
                    src, dest = parse_ax25_callsigns(frame)
                    payload = decode_payload(frame)
                    log(f"Received from {src} to {dest} at {addr}: {frame.hex()} (payload: {payload})")
                    with screen_lock:
                        packet_log.append((time.strftime('%H:%M:%S'), f"From {src} to {dest}", f"{payload} ({frame.hex()[:20]}...)"))
                        screen_dirty = True
                    with connection_lock:
                        if peer_socket:
                            log(f"Sending from {addr} to peer {peer_socket.getpeername()}: {frame.hex()}")
                            peer_socket.send(frame)
                    with screen_lock:
                        for client in active_kiss_clients:
                            if client != kiss_socket:
                                log(f"Forwarding from {addr} to KISS client {client.getpeername()}: {frame.hex()}")
                                client.send(frame)
        except Exception as e:
            log(f"KISS client {addr} error: {e}")
            with screen_lock:
                if kiss_socket in active_kiss_clients:
                    active_kiss_clients.remove(kiss_socket)
                    screen_dirty = True
            break
    kiss_socket.close()

def handle_peer(peer_socket_ref):
    global peer_status, screen_dirty
    peer_addr = peer_socket_ref.getpeername()
    log(f"Connected to peer: {peer_addr}")
    add_status_message(f"Connected to peer: {peer_addr}")
    with screen_lock:
        peer_status = f"Connected to {peer_addr[0]}:{peer_addr[1]}"
        screen_dirty = True
    buffer = b""
    while True:
        try:
            data = peer_socket_ref.recv(BUFFER_SIZE)
            if not data:
                log(f"Peer disconnected: {peer_addr} (no data received)")
                add_status_message(f"Peer disconnected: {peer_addr}")
                with screen_lock:
                    peer_status = "Disconnected"
                    screen_dirty = True
                break
            buffer += data
            log(f"Received raw data from peer {peer_addr}: {buffer.hex()}")
            while b'\xC0' in buffer[1:]:
                end = buffer.find(b'\xC0', 1)
                if end == -1:
                    break
                frame = buffer[:end + 1]
                buffer = buffer[end + 1:]
                if len(frame) > 2 and frame[0] == 0xC0 and frame[-1] == 0xC0:
                    src, dest = parse_ax25_callsigns(frame)
                    payload = decode_payload(frame)
                    log(f"Processing received packet from {src} to {dest} from peer {peer_addr}")
                    with screen_lock:
                        packet_log.append((time.strftime('%H:%M:%S'), f"From {src} to {dest}", f"{payload} ({frame.hex()[:20]}...)"))
                        screen_dirty = True
                    log(f"Received from {src} to {dest} from peer {peer_addr}: {frame.hex()} (payload: {payload})")
                    with screen_lock:
                        for kiss_socket in active_kiss_clients:
                            log(f"Forwarding from peer to KISS client {kiss_socket.getpeername()}: {frame.hex()}")
                            kiss_socket.send(frame)
        except Exception as e:
            log(f"Peer error {peer_addr}: {e}")
            add_status_message(f"Peer error: {e}")
            with screen_lock:
                peer_status = "Disconnected"
                screen_dirty = True
            break
    peer_socket_ref.close()
    with connection_lock:
        global peer_socket
        if peer_socket == peer_socket_ref:
            log(f"Clearing peer_socket {peer_addr} due to disconnection")
            peer_socket = None

def kiss_server():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    try:
        server.bind(('0.0.0.0', KISS_PORT))
        server.listen(1)
        log(f"KISS server listening on port {KISS_PORT} (Thread ID: {threading.current_thread().ident})")
    except Exception as e:
        log(f"KISS server bind error: {e}")
        sys.exit(1)
    while not stop_event.is_set():
        try:
            kiss_socket, addr = server.accept()
            threading.Thread(target=handle_kiss_client, args=(kiss_socket,), daemon=True).start()
        except Exception as e:
            log(f"KISS server accept error: {e}")
            time.sleep(1)

def peer_server():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    try:
        server.bind(('0.0.0.0', PEER_PORT))
        server.listen(1)
        log(f"Peer server listening on port {PEER_PORT} (Thread ID: {threading.current_thread().ident})")
    except Exception as e:
        log(f"Peer server bind error: {e}")
        sys.exit(1)
    while not stop_event.is_set():
        try:
            peer_socket_ref, addr = server.accept()
            with connection_lock:
                global peer_socket
                if not peer_socket or not ping_peer(peer_socket.getpeername()[0] if peer_socket else '0.0.0.0'):
                    peer_socket = peer_socket_ref
                    log(f"Peer connection accepted from {addr}")
                    threading.Thread(target=handle_peer, args=(peer_socket_ref,), daemon=True).start()
                else:
                    log(f"Already connected to {peer_socket.getpeername()}, rejecting additional connection from {addr}")
                    peer_socket_ref.close()
        except Exception as e:
            log(f"Peer server accept error: {e}")
            time.sleep(1)

def broadcast_presence():
    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    local_ip = get_local_ip()
    message = f"FAKE_DIREWOLF|{local_ip}|{PEER_PORT}".encode()
    while not stop_event.is_set():
        try:
            udp_socket.sendto(message, ('255.255.255.255', BROADCAST_PORT))
            log(f"BCAST_SENT: {message.decode()}")
            add_status_message(f"Broadcast sent: {message.decode()}")
        except Exception as e:
            log(f"Broadcast error: {e}")
            add_status_message(f"Broadcast error: {e}")
        time.sleep(BROADCAST_INTERVAL)

def listen_for_peers():
    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    udp_socket.bind(('', BROADCAST_PORT))
    local_ip = get_local_ip()
    while not stop_event.is_set():
        try:
            data, addr = udp_socket.recvfrom(BUFFER_SIZE)
            message = data.decode()
            if message.startswith("FAKE_DIREWOLF|"):
                _, peer_ip, peer_port = message.split('|')
                peer_port = int(peer_port)
                if peer_ip != local_ip:
                    with screen_lock:
                        discovered_peers[peer_ip] = peer_port
                        screen_dirty = True
                    log(f"BCAST_RCVD: {message} from {addr}")
                    add_status_message(f"Broadcast received: {message} from {addr[0]}")
        except Exception as e:
            log(f"Listen error: {e}")

def peer_manager():
    global peer_socket, peer_status, screen_dirty
    local_ip = get_local_ip()
    while not stop_event.is_set():
        with connection_lock:
            if peer_socket:
                try:
                    peer_ip, peer_port = peer_socket.getpeername()
                    readable, writable, errored = select.select([], [peer_socket], [peer_socket], 0.1)
                    if not writable or errored:
                        raise ConnectionError("Socket not writable or in error state")
                    peer_socket.send(b'')
                    if not ping_peer(peer_ip):
                        log(f"Peer {peer_ip} not responding, closing")
                        add_status_message(f"Peer {peer_ip} not responding")
                        peer_socket.close()
                        peer_socket = None
                        peer_status = "Disconnected"
                        screen_dirty = True
                except Exception as e:
                    log(f"Peer socket error or disconnected: {e} (was connected to {peer_socket.getpeername() if peer_socket else 'None'})")
                    add_status_message(f"Peer disconnected: {e}")
                    peer_socket.close()
                    peer_socket = None
                    peer_status = "Disconnected"
                    screen_dirty = True
            log(f"Peer state check: peer_socket={peer_socket}, discovered_peers={discovered_peers}")
            if not peer_socket and discovered_peers:
                for peer_ip, peer_port in list(discovered_peers.items()):
                    if peer_ip == local_ip:
                        continue
                    if local_ip >= peer_ip:
                        log(f"Skipping outbound to {peer_ip}:{peer_port}—local IP {local_ip} >= peer IP {peer_ip}, waiting for inbound")
                        add_status_message(f"Waiting for inbound from {peer_ip}")
                        continue
                    log(f"Attempting outbound connection to {peer_ip}:{peer_port}")
                    add_status_message(f"Connecting to {peer_ip}:{peer_port}")
                    new_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    try:
                        new_socket.connect((peer_ip, peer_port))
                        peer_socket = new_socket
                        log(f"Connected outbound to peer {peer_ip}:{peer_port}")
                        with screen_lock:
                            peer_status = f"Connected to {peer_ip}:{peer_port}"
                            screen_dirty = True
                        threading.Thread(target=handle_peer, args=(peer_socket,), daemon=True).start()
                        break
                    except Exception as e:
                        log(f"Outbound connection to {peer_ip}:{peer_port} failed: {e}")
                        add_status_message(f"Failed to connect to {peer_ip}: {e}")
                        new_socket.close()
        time.sleep(RETRY_INTERVAL)

def status_display(stdscr):
    global screen_dirty
    curses.start_color()
    curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_CYAN, curses.COLOR_BLACK)
    stdscr.nodelay(True)
    kiss_thread = threading.Thread(target=kiss_server, daemon=True)
    kiss_thread.start()
    peer_thread = threading.Thread(target=peer_server, daemon=True)
    peer_thread.start()
    broadcast_thread = threading.Thread(target=broadcast_presence, daemon=True)
    broadcast_thread.start()
    listen_thread = threading.Thread(target=listen_for_peers, daemon=True)
    listen_thread.start()
    manager_thread = threading.Thread(target=peer_manager, daemon=True)
    manager_thread.start()
    log(f"Started threads: KISS ({kiss_thread.ident}), Peer ({peer_thread.ident}), Broadcast ({broadcast_thread.ident}), Listen ({listen_thread.ident}), Manager ({manager_thread.ident})")
    while True:
        if screen_dirty:
            with screen_lock:
                stdscr.clear()
                max_y, max_x = stdscr.getmaxyx()
                border = "=" * (max_x - 2)
                stdscr.addstr(0, 0, border, curses.color_pair(1))
                stdscr.addstr(1, 2, f"Fake Direwolf Status - KISS Port: {KISS_PORT}", curses.color_pair(3))
                stdscr.addstr(2, 2, f"Local IP: {get_local_ip()} Peer Port: {PEER_PORT}", curses.color_pair(3))
                stdscr.addstr(3, 2, f"Peer Status: {peer_status}", curses.color_pair(2 if 'Connected' in peer_status else 1))
                stdscr.addstr(4, 2, f"KISS Clients: {len(active_kiss_clients)}", curses.color_pair(2 if active_kiss_clients else 1))
                stdscr.addstr(5, 2, "Status Updates:", curses.color_pair(3))
                for i, msg in enumerate(status_messages, start=6):
                    if i < max_y - 2 and i < 6 + MAX_STATUS_LINES:
                        stdscr.addstr(i, 4, msg[:max_x-6], curses.color_pair(3))
                stdscr.addstr(min(6 + MAX_STATUS_LINES, max_y - 2), 2, "Recent Packets:", curses.color_pair(3))
                for i, (ts, direction, frame) in enumerate(packet_log, start=min(7 + MAX_STATUS_LINES, max_y - 1)):
                    if i < max_y - 2:
                        line = f"{ts} {direction}: {frame[:max_x-30]}"
                        stdscr.addstr(i, 4, line, curses.color_pair(2))
                stdscr.addstr(max_y - 1, 0, border, curses.color_pair(1))
                stdscr.refresh()
                screen_dirty = False
        char = stdscr.getch()
        if char == ord('q') or char == ord('Q'):
            log("Shutting down via UI")
            add_status_message("Shutting down")
            stop_event.set()
            with connection_lock:
                if peer_socket:
                    peer_socket.close()
            sys.exit(0)
        time.sleep(0.1)

def main():
    curses.wrapper(status_display)

if __name__ == "__main__":
    main()